package _test.baeume.binarySearchTreeZZ;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import baeume.BinaryTree;

/**
 * This code was edited or generated using CloudGarden's Jigloo
 * SWT/Swing GUI Builder, which is free for non-commercial
 * use. If Jigloo is being used commercially (ie, by a corporation,
 * company or business for any purpose whatever) then you
 * should purchase a license for each developer using Jigloo.
 * Please visit www.cloudgarden.com for details.
 * Use of Jigloo implies acceptance of these licensing terms.
 * A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED FOR
 * THIS MACHINE, SO JIGLOO OR THIS CODE CANNOT BE USED
 * LEGALLY FOR ANY CORPORATE OR COMMERCIAL PURPOSE.
 */


public class TreeViewerZZ extends javax.swing.JFrame {
	private BinaryTree root;
	private BinarySearchTreeZZ rootBST;
	private javax.swing.JPanel canvas;

	private static TreeViewerZZ TREE_GUI_SINGLETON;
	
	private static final long WARTEZEIT = 1000;
	private static int WIDTH = 800;
	private static int HEIGHT = 400;


	private TreeViewerZZ() {
		super();
		{
			this.setSize(WIDTH, HEIGHT);
		}
		initGUI();
	}
	
	public static void show(BinaryTree pTree){
		if(TREE_GUI_SINGLETON == null){
			TREE_GUI_SINGLETON = new TreeViewerZZ();
		}
			TREE_GUI_SINGLETON.setBinaryTree(pTree);
			TREE_GUI_SINGLETON.setVisible(true);
			//System.out.println("warte start");
			warte();
			//System.out.println("warte ende");
			TREE_GUI_SINGLETON.zeige();
			warte();
	}
	
	private static void warte(){
		try {
			Thread.sleep(WARTEZEIT);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public static void show(BinarySearchTreeZZ pSearchTree){
		if(TREE_GUI_SINGLETON == null){
			TREE_GUI_SINGLETON = new TreeViewerZZ();
		}
			TREE_GUI_SINGLETON.setBinarySearchTree(pSearchTree);
			TREE_GUI_SINGLETON.setVisible(true);
			//System.out.println("warte start");
			warte();
			//System.out.println("warte ende");
			TREE_GUI_SINGLETON.zeigeBST();
			warte();
	}

	

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	private void initGUI() {
		BorderLayout layout = new BorderLayout();
		getContentPane().setLayout(layout);
		canvas = new javax.swing.JPanel();
		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		canvas.setBackground(new java.awt.Color(255, 255, 51));

		this.setPreferredSize(new java.awt.Dimension(WIDTH, HEIGHT));
		this.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent evt) {
				thisMouseClicked(evt);
			}
		});
		this.getContentPane().add(canvas, BorderLayout.CENTER);
		this.setLocation(250,0);
		pack();
	}



	private void zeichnen(Graphics g, BinaryTree b, int l, int r, int t) {
		//g.clearRect(0,0,canvas.getWidth(),canvas.getHeight());
		g.setFont(new Font("Serif", Font.PLAIN, 14));
		if (b != null && !b.isEmpty()){
			String s = b.getContent().toString();
			//System.out.println(s);
			int x = (int) ((l+r - s.length()*7) / 2);
			g.setColor(Color.blue);
			g.drawString(s, x, t*36);
			int x1 = (int) ( (l+r)/2);
			int y1 = t*36 + 7;
			int x2 = (int) ((l+x1)/2);
			int x3 = (int) ((x1+r)/2);
			int y2 = y1 + 36;
			g.setColor(Color.red);
			if (b.getLeftTree() != null && !b.getLeftTree().isEmpty())
				g.drawLine(x1, y1, x2, y2);
			if (b.getRightTree() != null && !b.getRightTree().isEmpty())
				g.drawLine(x1, y1, x3, y2);
			g.fillOval(x1 - 3, y1 - 3, 6, 6); 
			zeichnen(g, b.getLeftTree(),  l, (int)(l+r)/2, t+1);
			zeichnen(g, b.getRightTree(),  (int) (l+r)/2, r, t+1);
		}
	}
	
	private void zeichnenBST(Graphics g, BinarySearchTreeZZ b, int l, int r, int t) {
		//g.clearRect(0,0,canvas.getWidth(),canvas.getHeight());
		g.setFont(new Font("Serif", Font.PLAIN, 14));
		if (b != null && !b.isEmpty()){
			String s = b.getContent().toString();
			//System.out.println(s);
			int x = (int) ((l+r - s.length()*7) / 2);
			g.setColor(Color.blue);
			g.drawString(s, x, t*36);
			int x1 = (int) ( (l+r)/2);
			int y1 = t*36 + 7;
			int x2 = (int) ((l+x1)/2);
			int x3 = (int) ((x1+r)/2);
			int y2 = y1 + 36;
			g.setColor(Color.red);
			if (b.getLeftTree() != null && !b.getLeftTree().isEmpty())
				g.drawLine(x1, y1, x2, y2);
			if (b.getRightTree() != null && !b.getRightTree().isEmpty())
				g.drawLine(x1, y1, x3, y2);
			g.fillOval(x1 - 3, y1 - 3, 6, 6); 
			zeichnenBST(g, b.getLeftTree(),  l, (int)(l+r)/2, t+1);
			zeichnenBST(g, b.getRightTree(),  (int) (l+r)/2, r, t+1);
		}
	}

	private void zeige(){ 
		Graphics g = canvas.getGraphics();
		g.setColor(Color.yellow);
		g.fillRect(0, 0, canvas.getSize().width, canvas.getSize().height);
		zeichnen(g,root,1,canvas.getWidth(),1);
	}
	
	private void zeigeBST(){ 
		Graphics g = canvas.getGraphics();
		g.setColor(Color.yellow);
		g.fillRect(0, 0, canvas.getSize().width, canvas.getSize().height);
		zeichnenBST(g,rootBST,1,canvas.getWidth(),1);
	}

	private void setBinaryTree(BinaryTree baum){
		root = baum;
		zeige();
	}
	
	private void setBinarySearchTree(BinarySearchTreeZZ baum){
		rootBST = baum;
		zeigeBST();
	}
	
	private void thisMouseClicked(MouseEvent evt) {
		//System.out.println("this.mouseClicked, event="+evt);
		zeige();
	}

}
